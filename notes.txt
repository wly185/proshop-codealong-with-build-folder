03
build react app
npx create react app frontend
cd frontend
npm start

04
tidy up files and folder

tidy up app.js, app.css
.gitignore file add in nodemodule, env

git initial commit - cd to root folder

05 
styling imports, header, footer component

snippets extension -rafce shortcut
create components/ header, footer
npm i react-bootstrap - UI library, no need class use as component

instead of npm i bootstrap
bootswatch>lux>download
park bootstrap.min.css into frontend/src
index.js/ import bootstrap.min.css


copy react-bootstrap nav code into Header
add react-bootstrap containers
import icon cdn from cdn js fontawesome. park into link tag index.html/ put at the bottom of head tag
.py-3 meaning padding top bottom 3 for main tag
margin left auto ml-auto for header component a tag
80vh main for footer component

06
Product card component
download resources. extract product data from /products.js  into /frontend/src
map items into rows and cols into /screens/homescreen 
images in public folder
destructuring of props

07
Rating component
typecheck with proptypes

08 react router
npm i react-router-dom react-router-bootstrap
to style the links


09
props.match.params.id

11
node js backend runs on common js
prettier need to install extension 
create backend folder
npm init into root>create package json
update npm start script in package json to run backend/server
export declaration in copied datafile backend/product.js have to change to module.export = <>
use res.json to parse data file
restart server and navigate to route api/products
no idea why the array.find behaves so weird. i used == instead of ===, to induce type coercion as id might be number form. doesnt do well with the curly braces either. weird weird.

12 
he seems to prefer axios vs fetch, i think axios is promise based
however, axios has a proxy issue,
you can send axios error with .catch(err=>console.log(err))
can make changes in nodejs v11 and above without npm cors
frontend> packagejson>proxy:http://localhost:5000
f12 devtools can checkout the network tab>products file> response

to fetch backend data to frontend, in react, use action>axios request, component/screen>useeffect>dispatch, dispatch>reducer>state>useselector>state

match is a react router object
match.params.id, instead of req.params.id
do for frontend/src/screens/homescreen and productscreen

instead of props.history, use the usehistory hook

13 
nodemon and concurrent installation
scripts for server and client
match dependency for productscreen

15 
use newest ecmascript for nodejs
type module in package json
experimental node modules
package json add type:module
however file path and file extension must be included
update all import and export statements to es6 from commonjs
also updated node (installation) to use the experimental node

17
mongo atlas
mongoose
create connection string
env variables
pass in required options in console message as required by mongo


18

19
timestamps not too sure how the property works
you can get the fields from a typical ecommerce checkout page 


20
seeder file inside /data
remove _id from data/product.js
delete the seeder after your db has run with actual products

24 
json error stack for development
/products/1 - casterror
/products/601e23e5ceed993d1090bdc3 - 404 not found
controller will throw error

25 
back to the frontend
global state for component state that are used in many other components
reducer, component, actions
react-redux,redux-thunk (very simple middleware), redux-devtools-extension


26
src/index - add react-redux provider component and pass in src/store 
src/store create store - just copy the boilerplate.

27
reducers and the actions they fire confusing
actions - js functions
reducer - code pattern with switch/case, like a middleman
constants - optional, code pattern

30
breaking into smaller reducers is easier to debug

31
js array methods
react router history push
not sure why you need to add to the url

32 
open devtools to check if reducer is mounted properly, under state and tree
https://github.com/reduxjs/redux-thunk
https://reactrouter.com/web/api/match

state -
- getState().cart.cartItems
initialize -
- {cart:{cartItems:[<from localStorage>]}}
persisted -
- JSON.parse(window.localStorage.getItem('cartItems'))
persist -
- window.localStorage.setItem('cartItem',JSON.stringify(<getState>))

possible errors:
- store.js
  - using localStorage.getItem('') instead of window.localStorage => devtools:'store not found'
  - because the not finding the localstorage will jam up the whole store create function
  - make sure you run a ternary operator check in case !cartItem or cartItem === null. return [] instead.
    - cater to browser privacy issues
- cartAction.js
  - use the [...array] to pass in getState().cart.cartItems when localStorage.setItem(), else end up with nesting
- localStorage
  - use JSON.parse() for window.localStorage.getItem('') and JSON.stringify() for window.localStorage.setItem('',{})
- duplicate
  - refreshing cart will trigger dispatch and duplicate the item, wondering if addToCart should be under productScreen


a lot of namespace problems
different name for api value vs state value

need to understand
immutable functions - map, filter
switch/case statements 

34
use i.qty not qty for <option {value}>
issue with duplicate line item when i amend the qty. need to trace the dispatch

checkout handler
redirect to login unless it is set to shipping

36
controller folder

37
app use express json
for post routes
controller call a model method to check password
bcrypt compare methods
this.password
the saved password is hashed

37
test with invalid email, password
token is null

39 
jwt .sign, {payload, secret}
.decode

44
children
wrapper container
history, location, redirect
history, location object from react router
history object not found
usehistory hook and uselocation hook
use the ternary hook with state fetching with useselector


45
tweak the header login to show user name and profile links

46

51
be able to save the shipping address
store js windows.localStorage get item shipping address
initial state add shipping address to cart field
cart reducer state add shipping address

52
Wrap your React Bootstrap element in a <LinkContainer> to make it behave like a React Router <Link>
https://github.com/react-bootstrap/react-router-bootstrap

57
order controller
mongoose populate method

58
spreading state in the reducer when requesting will prevent loading error
reducer - set args loading:true, seems he had some loading issues

60
instructor added if statement into useeffect to resolve the loading 500 error issue

61
weird fields in controller are from paypal

63
https://developer.paypal.com/docs/checkout/integrate/

paypal>developer>sandbox mode>create app>

there is no personal or business option for me

add client secret to env file
create route in server.js to make api call for the client secret
test out in postman

setting html element tags properties with javascript
i didn't know it could be done with vanilla js, but i forget that react is javascript

you can see in f12 page elements

get the sdk script tag from paypal developer

dispatch the order pay reset to prevent the order screen from reloading endlessly

sandbox and business accounts, for customer and merchant
https://developer.paypal.com/developer/accounts/

client secret
https://developer.paypal.com/developer/applications
you can choose live when you are ready to go live


implementation
https://www.npmjs.com/package/react-paypal-button-v2

65
logout does not clear state
he added RESET type actions to this user action logout

70
user isadmin boolean, do not use || as false value cannot be updated this way
is non admin user able to change their admin? dont think so because the controller does not express it.

71
he did it a little differently
set state as empty
then set it in the useeffect from the data after checks on the data within the if statement

72
actions for update user need to dispatch update user details also

there are a lot of repetitive routes its confusing

75
product create route make a prefilled fields

press a create button and edit from there

76
not sure why need  product create reset when it is not a get request

79
npm multer
npm bus boy

can use with amazon s3 bucket

txt file so the folder gets added to git repo

make the route a static path

__dirname is ony availble with common js

80 
why the the axios request not in an action file, its static so not considered a state change?

formdata
https://developer.mozilla.org/en-US/docs/Web/API/FormData

83
omg he should have used morgan from the saved me all the console logs

85
regex no need use exact name
use exact route in case you dont have a keyword query on the front end
if you dont use exact double route will load and you will get two screens

86
array construction from page length and filled with keys
dont have to amend the route file if you add query, only do so when the path is changed
used limit and skip in the controller
involves page (current page) and pages (total pages)
if you dont use exact in your app js route, double route will match, and you will get two screens

88
react helmet allows adding meta tags on the particular react page
not helpful as it is not server side

89
run react build

set the server file to serve the build folder on production

set npm start command to run the built file

now all will run on port 5000

need to push code to github
built, domain, https cert

90
heroku
package json heroku post built script. it will run npm run build. you wont need the built folder mentioned above

install heroku cli

windows download the installer

